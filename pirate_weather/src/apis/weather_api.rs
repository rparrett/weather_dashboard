/*
 * Pirate Weather API
 *
 * Pirate Weather provides an open, free, and documented source of government weather data.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: mail@pirateweather.net
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::apis::ContentType;
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait WeatherApi: Send + Sync {
    /// GET /forecast/{api_key}/{lat_and_long_or_time}
    ///
    /// Fetch a weather forecast or get historical weather data based on input latitude and longitude.
    async fn weather<
        'api_key,
        'lat_and_long_or_time,
        'exclude,
        'extend,
        'lang,
        'units,
        'version,
        'tmextra,
        'icon,
    >(
        &self,
        api_key: &'api_key str,
        lat_and_long_or_time: &'lat_and_long_or_time str,
        exclude: Option<&'exclude str>,
        extend: Option<&'extend str>,
        lang: Option<&'lang str>,
        units: Option<&'units str>,
        version: Option<i32>,
        tmextra: Option<i32>,
        icon: Option<&'icon str>,
    ) -> Result<models::Weather200Response, Error<WeatherError>>;
}

pub struct WeatherApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl WeatherApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait]
impl WeatherApi for WeatherApiClient {
    /// Fetch a weather forecast or get historical weather data based on input latitude and longitude.
    async fn weather<
        'api_key,
        'lat_and_long_or_time,
        'exclude,
        'extend,
        'lang,
        'units,
        'version,
        'tmextra,
        'icon,
    >(
        &self,
        api_key: &'api_key str,
        lat_and_long_or_time: &'lat_and_long_or_time str,
        exclude: Option<&'exclude str>,
        extend: Option<&'extend str>,
        lang: Option<&'lang str>,
        units: Option<&'units str>,
        version: Option<i32>,
        tmextra: Option<i32>,
        icon: Option<&'icon str>,
    ) -> Result<models::Weather200Response, Error<WeatherError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/forecast/{api_key}/{lat_and_long_or_time}",
            local_var_configuration.base_path,
            api_key = crate::apis::urlencode(api_key),
            lat_and_long_or_time = crate::apis::urlencode(lat_and_long_or_time)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = exclude {
            local_var_req_builder =
                local_var_req_builder.query(&[("exclude", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = extend {
            local_var_req_builder =
                local_var_req_builder.query(&[("extend", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = lang {
            local_var_req_builder =
                local_var_req_builder.query(&[("lang", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = units {
            local_var_req_builder =
                local_var_req_builder.query(&[("units", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = version {
            local_var_req_builder =
                local_var_req_builder.query(&[("version", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tmextra {
            local_var_req_builder =
                local_var_req_builder.query(&[("tmextra", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = icon {
            local_var_req_builder =
                local_var_req_builder.query(&[("icon", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Weather200Response`"))),
                ContentType::Unsupported(local_var_unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{local_var_unknown_type}` content type response that cannot be converted to `models::Weather200Response`")))),
            }
        } else {
            let local_var_entity: Option<WeatherError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`weather`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WeatherError {
    Status400(models::Weather400Response),
    Status401(String),
    Status404(models::Weather404Response),
    Status429(String),
    Status500(models::Weather500Response),
    Status502(models::Weather502Response),
    UnknownValue(serde_json::Value),
}
