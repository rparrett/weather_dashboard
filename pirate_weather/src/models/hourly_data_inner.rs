/*
 * Pirate Weather API
 *
 * Pirate Weather provides an open, free, and documented source of government weather data.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: mail@pirateweather.net
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HourlyDataInner {
    /// The time of the data point in UNIX format.
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i32>,
    /// A summary of the weather.
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    /// An icon representing the weather.
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    /// The intensity of precipitation.
    #[serde(rename = "precipIntensity", skip_serializing_if = "Option::is_none")]
    pub precip_intensity: Option<f64>,
    /// The probability of precipitation.
    #[serde(rename = "precipProbability", skip_serializing_if = "Option::is_none")]
    pub precip_probability: Option<f64>,
    /// The standard deviation of the precipitation intensity.
    #[serde(
        rename = "precipIntensityError",
        skip_serializing_if = "Option::is_none"
    )]
    pub precip_intensity_error: Option<f64>,
    /// The total amount of precipitation.
    #[serde(rename = "precipAccumulation", skip_serializing_if = "Option::is_none")]
    pub precip_accumulation: Option<f64>,
    /// The type of precipitation occurring.
    #[serde(rename = "precipType", skip_serializing_if = "Option::is_none")]
    pub precip_type: Option<String>,
    /// The air temperature.
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    /// The apparent temperature (feels like).
    #[serde(
        rename = "apparentTemperature",
        skip_serializing_if = "Option::is_none"
    )]
    pub apparent_temperature: Option<f64>,
    /// The dew point temperature.
    #[serde(rename = "dewPoint", skip_serializing_if = "Option::is_none")]
    pub dew_point: Option<f64>,
    /// The relative humidity.
    #[serde(rename = "humidity", skip_serializing_if = "Option::is_none")]
    pub humidity: Option<f64>,
    /// The air pressure.
    #[serde(rename = "pressure", skip_serializing_if = "Option::is_none")]
    pub pressure: Option<f64>,
    /// The wind speed.
    #[serde(rename = "windSpeed", skip_serializing_if = "Option::is_none")]
    pub wind_speed: Option<f64>,
    /// The wind gust speed.
    #[serde(rename = "windGust", skip_serializing_if = "Option::is_none")]
    pub wind_gust: Option<f64>,
    /// The direction of the wind in degrees.
    #[serde(rename = "windBearing", skip_serializing_if = "Option::is_none")]
    pub wind_bearing: Option<f64>,
    /// The fraction of the sky covered by clouds.
    #[serde(rename = "cloudCover", skip_serializing_if = "Option::is_none")]
    pub cloud_cover: Option<f64>,
    /// The UV index.
    #[serde(rename = "uvIndex", skip_serializing_if = "Option::is_none")]
    pub uv_index: Option<f64>,
    /// The visibility in kilometers.
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<f64>,
    /// The ozone concentration in Dobson units.
    #[serde(rename = "ozone", skip_serializing_if = "Option::is_none")]
    pub ozone: Option<f64>,
    /// The amount of near-surface smoke in ug/m3. Only returned when version>2.
    #[serde(rename = "smoke", skip_serializing_if = "Option::is_none")]
    pub smoke: Option<f64>,
    /// The amount of liquid precipitation expected. Only returned when version>2.
    #[serde(rename = "liquidAccumulation", skip_serializing_if = "Option::is_none")]
    pub liquid_accumulation: Option<f64>,
    /// The amount of snow precipitation expected. Only returned when version>2.
    #[serde(rename = "snowAccumulation", skip_serializing_if = "Option::is_none")]
    pub snow_accumulation: Option<f64>,
    /// The amount of ice precipitation expected. Only returned when version>2.
    #[serde(rename = "iceAccumulation", skip_serializing_if = "Option::is_none")]
    pub ice_accumulation: Option<f64>,
    /// The distance to the nearest storm.
    #[serde(
        rename = "nearestStormDistance",
        skip_serializing_if = "Option::is_none"
    )]
    pub nearest_storm_distance: Option<f64>,
    /// The direction to the nearest storm.
    #[serde(
        rename = "nearestStormBearing",
        skip_serializing_if = "Option::is_none"
    )]
    pub nearest_storm_bearing: Option<f64>,
    /// The Fosburg fire index. Only returned when version>2.
    #[serde(rename = "fireIndex", skip_serializing_if = "Option::is_none")]
    pub fire_index: Option<f64>,
    /// The apparent temperature reported by NBM and gfs. Only returned when version>2.
    #[serde(rename = "feelsLike", skip_serializing_if = "Option::is_none")]
    pub feels_like: Option<f64>,
}

impl HourlyDataInner {
    pub fn new() -> HourlyDataInner {
        HourlyDataInner {
            time: None,
            summary: None,
            icon: None,
            precip_intensity: None,
            precip_probability: None,
            precip_intensity_error: None,
            precip_accumulation: None,
            precip_type: None,
            temperature: None,
            apparent_temperature: None,
            dew_point: None,
            humidity: None,
            pressure: None,
            wind_speed: None,
            wind_gust: None,
            wind_bearing: None,
            cloud_cover: None,
            uv_index: None,
            visibility: None,
            ozone: None,
            smoke: None,
            liquid_accumulation: None,
            snow_accumulation: None,
            ice_accumulation: None,
            nearest_storm_distance: None,
            nearest_storm_bearing: None,
            fire_index: None,
            feels_like: None,
        }
    }
}
