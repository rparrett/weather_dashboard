/*
 * Pirate Weather API
 *
 * Pirate Weather provides an open, free, and documented source of government weather data.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: mail@pirateweather.net
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MinutelyDataInner {
    /// The time of the data point in UNIX format.
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<i32>,
    /// The intensity of precipitation.
    #[serde(rename = "precipIntensity", skip_serializing_if = "Option::is_none")]
    pub precip_intensity: Option<f64>,
    /// The probability of precipitation.
    #[serde(rename = "precipProbability", skip_serializing_if = "Option::is_none")]
    pub precip_probability: Option<f64>,
    /// The standard deviation of the precipitation intensity.
    #[serde(
        rename = "precipIntensityError",
        skip_serializing_if = "Option::is_none"
    )]
    pub precip_intensity_error: Option<f64>,
    /// The type of precipitation occurring.
    #[serde(rename = "precipType", skip_serializing_if = "Option::is_none")]
    pub precip_type: Option<String>,
}

impl MinutelyDataInner {
    pub fn new() -> MinutelyDataInner {
        MinutelyDataInner {
            time: None,
            precip_intensity: None,
            precip_probability: None,
            precip_intensity_error: None,
            precip_type: None,
        }
    }
}
