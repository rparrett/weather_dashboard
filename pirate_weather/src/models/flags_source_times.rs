/*
 * Pirate Weather API
 *
 * Pirate Weather provides an open, free, and documented source of government weather data.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: mail@pirateweather.net
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FlagsSourceTimes : The times in UTC when the models were last updated.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlagsSourceTimes {
    /// The time the HRRR model for 0-18 hours was last updated.
    #[serde(rename = "hrrr_0-18", skip_serializing_if = "Option::is_none")]
    pub hrrr_0_18: Option<String>,
    /// The time the HRRR sub-hourly model was last updated.
    #[serde(rename = "hrrr_subh", skip_serializing_if = "Option::is_none")]
    pub hrrr_subh: Option<String>,
    /// The time the NBM model was last updated.
    #[serde(rename = "nbm", skip_serializing_if = "Option::is_none")]
    pub nbm: Option<String>,
    /// The time the NBM fire model was last updated.
    #[serde(rename = "nbm_fire", skip_serializing_if = "Option::is_none")]
    pub nbm_fire: Option<String>,
    /// The time the HRRR model for 18-48 hours was last updated.
    #[serde(rename = "hrrr_18-48", skip_serializing_if = "Option::is_none")]
    pub hrrr_18_48: Option<String>,
    /// The time the GFS model was last updated.
    #[serde(rename = "gfs", skip_serializing_if = "Option::is_none")]
    pub gfs: Option<String>,
    /// The time the GEFS model was last updated.
    #[serde(rename = "gefs", skip_serializing_if = "Option::is_none")]
    pub gefs: Option<String>,
}

impl FlagsSourceTimes {
    /// The times in UTC when the models were last updated.
    pub fn new() -> FlagsSourceTimes {
        FlagsSourceTimes {
            hrrr_0_18: None,
            hrrr_subh: None,
            nbm: None,
            nbm_fire: None,
            hrrr_18_48: None,
            gfs: None,
            gefs: None,
        }
    }
}
