/*
 * Pirate Weather API
 *
 * Pirate Weather provides an open, free, and documented source of government weather data.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: mail@pirateweather.net
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Flags : A block containing miscellaneous data for the API request.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Flags {
    /// The models used to generate the forecast.
    #[serde(rename = "sources", skip_serializing_if = "Option::is_none")]
    pub sources: Option<Vec<String>>,
    #[serde(rename = "sourceTimes", skip_serializing_if = "Option::is_none")]
    pub source_times: Option<Box<models::FlagsSourceTimes>>,
    /// The distance to the nearest station (not implemented, always returns 0).
    #[serde(rename = "nearest-station", skip_serializing_if = "Option::is_none")]
    pub nearest_station: Option<i32>,
    /// The units used in the forecasts.
    #[serde(rename = "units", skip_serializing_if = "Option::is_none")]
    pub units: Option<String>,
    /// The version of Pirate Weather used to generate the forecast.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "sourceIDX", skip_serializing_if = "Option::is_none")]
    pub source_idx: Option<Box<models::FlagsSourceIdx>>,
    /// The time taken to process the request in milliseconds. Only returned when version>2.
    #[serde(rename = "processTime", skip_serializing_if = "Option::is_none")]
    pub process_time: Option<i32>,
}

impl Flags {
    /// A block containing miscellaneous data for the API request.
    pub fn new() -> Flags {
        Flags {
            sources: None,
            source_times: None,
            nearest_station: None,
            units: None,
            version: None,
            source_idx: None,
            process_time: None,
        }
    }
}
